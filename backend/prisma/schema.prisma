// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["filterJson"]
}

enum Pronouns {
  THEY_THEM
  HE_HIS
  SHE_HER
  NONE
}

enum ConversationType {
  DEEP
  LIGHT
  SMALL
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String?        @unique
  birthday      DateTime
  pronouns      Pronouns
  name          String
  interests     String[]
  mood          String?
  pushToken     String? // Assume one user one device for now, maybe revisit
  profileImage  Int?
  extra         Json           @default("{}")  // Store badge state here
  conversations Conversation[]
  messages      Message[]
  feedback      Feedback[]
  particpants   Participant[]
}

model Participant {
  id                Int          @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            Int
  user              User         @relation(fields: [userId], references: [id])
  conversationId    Int
  Conversation      Conversation @relation(fields: [conversationId], references: [id])
  lastReadTime      DateTime?
  lastReadMessageId Int?
  lastReadMessage   Message?     @relation(fields: [lastReadMessageId], references: [id])
}

model Conversation {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime?         @updatedAt
  channel      String            @unique
  type         ConversationType?
  icebreaker   String?
  people       User[]
  participants Participant[]
  messages     Message[]
  feedback     Feedback[]
}

model Message {
  id                   Int           @id @default(autoincrement())
  createdAt            DateTime      @default(now())
  updatedAt            DateTime?     @updatedAt
  author               User          @relation(fields: [userId], references: [id])
  userId               Int
  conversation         Conversation  @relation(fields: [conversationId], references: [id])
  conversationId       Int
  text                 String
  lastReadParticipants Participant[]
}

model Feedback {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  author         User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  userId         Int
  survey         Json         @default("{}")
}
